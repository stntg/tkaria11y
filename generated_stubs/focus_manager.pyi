# tkaria11y.focus_manager.pyi
# Type stubs for tkaria11y.focus_manager

from typing import Any, Dict, List, Optional, Union, Callable, Tuple, Type, Set
import tkinter as tk
from tkinter import ttk
from enum import Enum
from abc import ABC, abstractmethod

class Any:
    """Special type indicating an unconstrained type."""

    def __init__(self: Any, args: Any, kwargs: Any) -> Any: ...

class Enum:
    """"""

    ...

class FocusDirection(Enum):
    NEXT: str
    PREVIOUS: str
    FIRST: str
    LAST: str
    UP: str
    DOWN: str
    LEFT: str
    RIGHT: str

class FocusIndicator:
    """Visual focus indicator for accessibility"""

    def __init__(self: Any, root: Tk) -> Any: ...
    def hide_focus(self: Any) -> None: ...
    def set_color(self: Any, color: str) -> None: ...
    def set_width(self: Any, width: int) -> None: ...
    def show_focus(self: Any, widget: Widget) -> None: ...
    def update_focus(self: Any) -> None: ...

class FocusManager:
    """Advanced focus management system"""

    def __init__(self: Any, root: Tk) -> Any: ...
    def add_focus_callback(self: Any, widget: Widget, callback: Callable) -> None: ...
    def create_focus_group(self: Any, name: str, widgets: List) -> None: ...
    def enable_focus_indicator(self: Any, enabled: bool = ...) -> None: ...
    def focus_first(self: Any) -> bool: ...
    def focus_group_next(self: Any, group_name: str) -> bool: ...
    def focus_group_previous(self: Any, group_name: str) -> bool: ...
    def focus_last(self: Any) -> bool: ...
    def focus_next(self: Any) -> bool: ...
    def focus_previous(self: Any) -> bool: ...
    def focus_widget(self: Any, widget: Widget) -> bool: ...
    def get_current_focus(self: Any) -> Optional: ...
    def get_focus_order(self: Any) -> List: ...
    def register_widget(
        self: Any, widget: Widget, focus_group: Optional = ..., skip_focus: bool = ...
    ) -> None: ...
    def remove_focus_callback(
        self: Any, widget: Widget, callback: Callable
    ) -> None: ...
    def restore_previous_focus(self: Any) -> bool: ...
    def set_focus_indicator_color(self: Any, color: str) -> None: ...
    def set_focus_indicator_width(self: Any, width: int) -> None: ...
    def set_focus_order(self: Any, widgets: List) -> None: ...
    def unregister_widget(self: Any, widget: Widget) -> None: ...

def announce(message: str, priority: str = ...) -> None: ...
def configure_advanced_focus_traversal(
    root: Tk, widgets: Optional = ...
) -> FocusManager: ...
def get_focus_manager(root: Tk) -> FocusManager: ...
def speak(text: str, priority: str = ..., interrupt: bool = ...) -> None: ...

tk: Any
weakref: Any
