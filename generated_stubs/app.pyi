# tkaria11y.app.pyi
# Type stubs for tkaria11y.app

from typing import Any, Dict, List, Optional, Union, Callable, Tuple, Type, Set
import tkinter as tk
from tkinter import ttk
from enum import Enum
from abc import ABC, abstractmethod

class AccessibleApp(tk.Tk):
    def __init__(self: Any, title: str = ..., high_contrast: bool = ..., dyslexic_font: bool = ..., scaling: float = ..., enable_inspector: bool = ...) -> Any: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def aspect(self: Any, minNumer: Any = ..., minDenom: Any = ..., maxNumer: Any = ..., maxDenom: Any = ...) -> Any: ...
    def attributes(self: Any, args: Any, return_python_dict: Any = ..., kwargs: Any) -> Any: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def client(self: Any, name: Any = ...) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def colormapwindows(self: Any, wlist: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def command(self: Any, value: Any = ...) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deiconify(self: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def disable_dyslexic_font(self: Any) -> None: ...
    def disable_high_contrast(self: Any) -> None: ...
    def enable_dyslexic_font(self: Any) -> None: ...
    def enable_high_contrast(self: Any) -> None: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def focusmodel(self: Any, model: Any = ...) -> Any: ...
    def forget(self: Any, window: Any) -> Any: ...
    def frame(self: Any) -> Any: ...
    def geometry(self: Any, newGeometry: Any = ...) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, baseWidth: Any = ..., baseHeight: Any = ..., widthInc: Any = ..., heightInc: Any = ...) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def group(self: Any, pathName: Any = ...) -> Any: ...
    def iconbitmap(self: Any, bitmap: Any = ..., default: Any = ...) -> Any: ...
    def iconify(self: Any) -> Any: ...
    def iconmask(self: Any, bitmap: Any = ...) -> Any: ...
    def iconname(self: Any, newName: Any = ...) -> Any: ...
    def iconphoto(self: Any, default: Any = ..., args: Any) -> Any: ...
    def iconposition(self: Any, x: Any = ..., y: Any = ...) -> Any: ...
    def iconwindow(self: Any, pathName: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_dyslexic_font_enabled(self: Any) -> bool: ...
    def is_high_contrast_enabled(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def loadtk(self: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def manage(self: Any, widget: Any) -> Any: ...
    def maxsize(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def minsize(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def overrideredirect(self: Any, boolean: Any = ...) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def positionfrom(self: Any, who: Any = ...) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def protocol(self: Any, name: Any = ..., func: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def readprofile(self: Any, baseName: Any, className: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def report_callback_exception(self: Any, exc: Any, val: Any, tb: Any) -> Any: ...
    def resizable(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def sizefrom(self: Any, who: Any = ...) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, newstate: Any = ...) -> Any: ...
    def title(self: Any, string: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def toggle_dyslexic_font(self: Any) -> bool: ...
    def toggle_high_contrast(self: Any) -> bool: ...
    def transient(self: Any, master: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def withdraw(self: Any) -> Any: ...
    def wm_aspect(self: Any, minNumer: Any = ..., minDenom: Any = ..., maxNumer: Any = ..., maxDenom: Any = ...) -> Any: ...
    def wm_attributes(self: Any, args: Any, return_python_dict: Any = ..., kwargs: Any) -> Any: ...
    def wm_client(self: Any, name: Any = ...) -> Any: ...
    def wm_colormapwindows(self: Any, wlist: Any) -> Any: ...
    def wm_command(self: Any, value: Any = ...) -> Any: ...
    def wm_deiconify(self: Any) -> Any: ...
    def wm_focusmodel(self: Any, model: Any = ...) -> Any: ...
    def wm_forget(self: Any, window: Any) -> Any: ...
    def wm_frame(self: Any) -> Any: ...
    def wm_geometry(self: Any, newGeometry: Any = ...) -> Any: ...
    def wm_grid(self: Any, baseWidth: Any = ..., baseHeight: Any = ..., widthInc: Any = ..., heightInc: Any = ...) -> Any: ...
    def wm_group(self: Any, pathName: Any = ...) -> Any: ...
    def wm_iconbitmap(self: Any, bitmap: Any = ..., default: Any = ...) -> Any: ...
    def wm_iconify(self: Any) -> Any: ...
    def wm_iconmask(self: Any, bitmap: Any = ...) -> Any: ...
    def wm_iconname(self: Any, newName: Any = ...) -> Any: ...
    def wm_iconphoto(self: Any, default: Any = ..., args: Any) -> Any: ...
    def wm_iconposition(self: Any, x: Any = ..., y: Any = ...) -> Any: ...
    def wm_iconwindow(self: Any, pathName: Any = ...) -> Any: ...
    def wm_manage(self: Any, widget: Any) -> Any: ...
    def wm_maxsize(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def wm_minsize(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def wm_overrideredirect(self: Any, boolean: Any = ...) -> Any: ...
    def wm_positionfrom(self: Any, who: Any = ...) -> Any: ...
    def wm_protocol(self: Any, name: Any = ..., func: Any = ...) -> Any: ...
    def wm_resizable(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def wm_sizefrom(self: Any, who: Any = ...) -> Any: ...
    def wm_state(self: Any, newstate: Any = ...) -> Any: ...
    def wm_title(self: Any, string: Any = ...) -> Any: ...
    def wm_transient(self: Any, master: Any = ...) -> Any: ...
    def wm_withdraw(self: Any) -> Any: ...

class HighContrastTheme:
    """High contrast theme for better visibility"""
    COLORS: Dict[str, Any]
    STANDARD_COLORS: Dict[str, Any]

    def __init__(self: Any, args: Any, kwargs: Any) -> Any: ...
    def apply(root: Tk) -> None: ...
    def is_applied(root: Tk) -> bool: ...
    def remove(root: Tk) -> None: ...

def configure_focus_traversal(root: Tk) -> None: ...

def launch_inspector(root: Tk) -> Toplevel: ...

def set_dyslexic_font(root: Tk, family: str = ..., size: int = ..., weight: str = ...) -> None: ...

def shutdown_tts() -> None: ...

tk: Any