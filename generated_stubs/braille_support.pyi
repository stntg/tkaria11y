# tkaria11y.braille_support.pyi
# Type stubs for tkaria11y.braille_support

from typing import Any, Dict, List, Optional, Union, Callable, Tuple, Type, Set
import tkinter as tk
from tkinter import ttk
from enum import Enum
from abc import ABC, abstractmethod

class ABC:
    """Helper class that provides a standard way to create an ABC using"""

    def __init__(self: Any, args: Any, kwargs: Any) -> Any: ...

class Any:
    """Special type indicating an unconstrained type."""

    def __init__(self: Any, args: Any, kwargs: Any) -> Any: ...

class BrailleCell:
    """Represents a single braille cell"""

    cursor: bool

    def __init__(self: Any, dots: int, cursor: bool = ...) -> None: ...
    def from_char(char: str) -> BrailleCell: ...
    def to_unicode(self: Any) -> str: ...

class BrailleDisplay(ABC):
    """Abstract base class for braille display drivers"""

    def __init__(
        self: Any, display_type: BrailleDisplayType, cell_count: int
    ) -> Any: ...
    def add_callback(self: Any, event_type: str, callback: Callable) -> None: ...
    def connect(self: Any) -> bool: ...
    def disconnect(self: Any) -> None: ...
    def read_keys(self: Any) -> List: ...
    def remove_callback(self: Any, event_type: str, callback: Callable) -> None: ...
    def set_cursor_position(self: Any, position: int) -> None: ...
    def set_text(self: Any, text: str, start_pos: int = ...) -> None: ...
    def write_cells(self: Any, cells: List, start_pos: int = ...) -> bool: ...

class BrailleDisplayType(Enum):
    GENERIC: str
    FREEDOM_SCIENTIFIC: str
    HUMANWARE: str
    PAPENMEIER: str
    ALVA: str
    BAUM: str
    HANDY_TECH: str
    HIMS: str
    NIPPON_TELESOFT: str
    OPTELEC: str
    SEIKA: str
    EUROBRAILLE: str

class BrailleManager:
    """Manages braille display integration"""

    def __init__(self: Any) -> Any: ...
    def add_display(self: Any, display: BrailleDisplay) -> None: ...
    def display_text(self: Any, text: str, position: int = ...) -> None: ...
    def display_widget_info(self: Any, widget: Widget) -> None: ...
    def get_active_display(self: Any) -> Optional: ...
    def get_available_displays(self: Any) -> List: ...
    def get_grade(self: Any) -> int: ...
    def is_focus_tracking_enabled(self: Any) -> bool: ...
    def remove_display(self: Any, display: BrailleDisplay) -> None: ...
    def set_active_display(self: Any, display: BrailleDisplay) -> bool: ...
    def set_cursor_settings(
        self: Any, show: bool = ..., blink: bool = ..., rate: float = ...
    ) -> None: ...
    def set_focus_tracking(self: Any, enabled: bool) -> None: ...
    def set_grade(self: Any, grade: int) -> None: ...
    def shutdown(self: Any) -> None: ...

class Enum:
    """"""

    ...

class GenericBrailleDisplay(BrailleDisplay):
    """Generic braille display implementation"""

    def __init__(self: Any, cell_count: int = ...) -> Any: ...
    def add_callback(self: Any, event_type: str, callback: Callable) -> None: ...
    def connect(self: Any) -> bool: ...
    def disconnect(self: Any) -> None: ...
    def get_simulated_text(self: Any) -> str: ...
    def read_keys(self: Any) -> List: ...
    def remove_callback(self: Any, event_type: str, callback: Callable) -> None: ...
    def set_cursor_position(self: Any, position: int) -> None: ...
    def set_text(self: Any, text: str, start_pos: int = ...) -> None: ...
    def write_cells(self: Any, cells: List, start_pos: int = ...) -> bool: ...

def abstractmethod(funcobj: Any) -> Any: ...
def dataclass(
    cls: Any = ...,
    init: Any = ...,
    repr: Any = ...,
    eq: Any = ...,
    order: Any = ...,
    unsafe_hash: Any = ...,
    frozen: Any = ...,
    match_args: Any = ...,
    kw_only: Any = ...,
    slots: Any = ...,
    weakref_slot: Any = ...,
) -> Any: ...
def display_braille_text(text: str, position: int = ...) -> None: ...
def display_widget_on_braille(widget: Widget) -> None: ...
def get_braille_display_info() -> Dict: ...
def get_braille_manager() -> BrailleManager: ...
def is_braille_display_available() -> bool: ...

queue: Any

def setup_braille_support(root: Tk) -> None: ...
def shutdown_braille_support() -> None: ...

threading: Any
time: Any
tk: Any
