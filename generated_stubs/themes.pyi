# tkaria11y.themes.pyi
# Type stubs for tkaria11y.themes

from typing import Any, Dict, List, Optional, Union, Callable, Tuple, Type, Set
import tkinter as tk
from tkinter import ttk
from enum import Enum
from abc import ABC, abstractmethod

class AccessibilityFontManager:
    """Manages accessibility-friendly fonts and font settings"""

    DYSLEXIC_FONTS: List[Any]
    MIN_FONT_SIZES: Dict[str, Any]
    READABLE_FONTS: List[Any]

    def __init__(self: Any, root: Tk) -> Any: ...
    def apply_dyslexic_font(self: Any, size: int = ..., weight: str = ...) -> None: ...
    def apply_extra_large_text(self: Any) -> None: ...
    def apply_large_text(self: Any) -> None: ...
    def apply_readable_font(self: Any, size: int = ..., weight: str = ...) -> None: ...
    def decrease_font_size(self: Any, decrement: int = ...) -> None: ...
    def find_best_font(self: Any, preferred_fonts: List) -> str: ...
    def get_available_fonts(self: Any) -> List: ...
    def get_font_info(self: Any, widget: Widget) -> Dict: ...
    def increase_font_size(self: Any, increment: int = ...) -> None: ...
    def restore_original_fonts(self: Any) -> None: ...
    def set_font_scale(self: Any, scale: float) -> None: ...

class Any:
    """Special type indicating an unconstrained type."""

    def __init__(self: Any, args: Any, kwargs: Any) -> Any: ...

class ColorBlindnessSupport:
    """Support for color blindness accessibility"""

    COLORBLIND_SAFE_PALETTES: Dict[str, Any]

    def __init__(self: Any, args: Any, kwargs: Any) -> Any: ...
    def apply_colorblind_safe_theme(root: Tk, colorblind_type: str = ...) -> None: ...
    def get_safe_palette(colorblind_type: str = ...) -> Dict: ...

class HighContrastTheme:
    """High contrast theme for better visibility"""

    COLORS: Dict[str, Any]
    STANDARD_COLORS: Dict[str, Any]

    def __init__(self: Any, args: Any, kwargs: Any) -> Any: ...
    def apply(root: Tk) -> None: ...
    def is_applied(root: Tk) -> bool: ...
    def remove(root: Tk) -> None: ...

def apply_colorblind_safe_theme(root: Tk, colorblind_type: str = ...) -> None: ...
def decrease_font_size(root: Tk, decrement: int = ...) -> None: ...
def get_font_manager(root: Tk) -> AccessibilityFontManager: ...
def increase_font_size(root: Tk, increment: int = ...) -> None: ...
def set_dyslexic_font(
    root: Tk, family: str = ..., size: int = ..., weight: str = ...
) -> None: ...
def set_extra_large_text(root: Tk) -> None: ...
def set_font_scale(root: Tk, scale: float) -> None: ...
def set_large_text(root: Tk) -> None: ...
def set_readable_font(root: Tk, size: int = ..., weight: str = ...) -> None: ...

tk: Any

def validate_font_accessibility(root: Tk) -> List: ...

weakref: Any
