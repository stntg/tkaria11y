# tkaria11y.widgets.pyi
# Type stubs for tkaria11y.widgets

from typing import Any, Dict, List, Optional, Union, Callable, Tuple, Type, Set
import tkinter as tk
from tkinter import ttk
from enum import Enum
from abc import ABC, abstractmethod

class AccessibleButton(AccessibleMixin, tk.Button):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def flash(self: Any) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def invoke(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleEntry(AccessibleMixin, tk.Entry):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def delete(self: Any, first: Any, last: Any = ...) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def icursor(self: Any, index: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, index: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, index: Any, string: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def scan_dragto(self: Any, x: Any) -> Any: ...
    def scan_mark(self: Any, x: Any) -> Any: ...
    def select_adjust(self: Any, index: Any) -> Any: ...
    def select_clear(self: Any) -> Any: ...
    def select_from(self: Any, index: Any) -> Any: ...
    def select_present(self: Any) -> Any: ...
    def select_range(self: Any, start: Any, end: Any) -> Any: ...
    def select_to(self: Any, index: Any) -> Any: ...
    def selection_adjust(self: Any, index: Any) -> Any: ...
    def selection_clear(self: Any) -> Any: ...
    def selection_from(self: Any, index: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def selection_present(self: Any) -> Any: ...
    def selection_range(self: Any, start: Any, end: Any) -> Any: ...
    def selection_to(self: Any, index: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def xview(self: Any, args: Any) -> Any: ...
    def xview_moveto(self: Any, fraction: Any) -> Any: ...
    def xview_scroll(self: Any, number: Any, what: Any) -> Any: ...

class AccessibleLabel(AccessibleMixin, tk.Label):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleText(AccessibleMixin, tk.Text):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, index: Any) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def compare(self: Any, index1: Any, op: Any, index2: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def count(self: Any, index1: Any, index2: Any, options: Any, return_ints: Any = ...) -> Any: ...
    def debug(self: Any, boolean: Any = ...) -> Any: ...
    def delete(self: Any, index1: Any, index2: Any = ...) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def dlineinfo(self: Any, index: Any) -> Any: ...
    def dump(self: Any, index1: Any, index2: Any = ..., command: Any = ..., kw: Any) -> Any: ...
    def edit(self: Any, args: Any) -> Any: ...
    def edit_modified(self: Any, arg: Any = ...) -> Any: ...
    def edit_redo(self: Any) -> Any: ...
    def edit_reset(self: Any) -> Any: ...
    def edit_separator(self: Any) -> Any: ...
    def edit_undo(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any, index1: Any, index2: Any = ...) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_cget(self: Any, index: Any, option: Any) -> Any: ...
    def image_configure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def image_create(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, index: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, index: Any, chars: Any, args: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def mark_gravity(self: Any, markName: Any, direction: Any = ...) -> Any: ...
    def mark_names(self: Any) -> Any: ...
    def mark_next(self: Any, index: Any) -> Any: ...
    def mark_previous(self: Any, index: Any) -> Any: ...
    def mark_set(self: Any, markName: Any, index: Any) -> Any: ...
    def mark_unset(self: Any, markNames: Any) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def peer_create(self: Any, newPathName: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def peer_names(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def replace(self: Any, index1: Any, index2: Any, chars: Any, args: Any) -> Any: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def scan_dragto(self: Any, x: Any, y: Any) -> Any: ...
    def scan_mark(self: Any, x: Any, y: Any) -> Any: ...
    def search(self: Any, pattern: Any, index: Any, stopindex: Any = ..., forwards: Any = ..., backwards: Any = ..., exact: Any = ..., regexp: Any = ..., nocase: Any = ..., count: Any = ..., elide: Any = ...) -> Any: ...
    def see(self: Any, index: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tag_add(self: Any, tagName: Any, index1: Any, args: Any) -> Any: ...
    def tag_bind(self: Any, tagName: Any, sequence: Any, func: Any, add: Any = ...) -> Any: ...
    def tag_cget(self: Any, tagName: Any, option: Any) -> Any: ...
    def tag_config(self: Any, tagName: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tag_configure(self: Any, tagName: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tag_delete(self: Any, tagNames: Any) -> Any: ...
    def tag_lower(self: Any, tagName: Any, belowThis: Any = ...) -> Any: ...
    def tag_names(self: Any, index: Any = ...) -> Any: ...
    def tag_nextrange(self: Any, tagName: Any, index1: Any, index2: Any = ...) -> Any: ...
    def tag_prevrange(self: Any, tagName: Any, index1: Any, index2: Any = ...) -> Any: ...
    def tag_raise(self: Any, tagName: Any, aboveThis: Any = ...) -> Any: ...
    def tag_ranges(self: Any, tagName: Any) -> Any: ...
    def tag_remove(self: Any, tagName: Any, index1: Any, index2: Any = ...) -> Any: ...
    def tag_unbind(self: Any, tagName: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def window_cget(self: Any, index: Any, option: Any) -> Any: ...
    def window_config(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def window_configure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def window_create(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def window_names(self: Any) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def xview(self: Any, args: Any) -> Any: ...
    def xview_moveto(self: Any, fraction: Any) -> Any: ...
    def xview_scroll(self: Any, number: Any, what: Any) -> Any: ...
    def yview(self: Any, args: Any) -> Any: ...
    def yview_moveto(self: Any, fraction: Any) -> Any: ...
    def yview_pickplace(self: Any, what: Any) -> Any: ...
    def yview_scroll(self: Any, number: Any, what: Any) -> Any: ...

class AccessibleCheckbutton(AccessibleMixin, tk.Checkbutton):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def deselect(self: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def flash(self: Any) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def invoke(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def select(self: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def toggle(self: Any) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleRadiobutton(AccessibleMixin, tk.Radiobutton):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def deselect(self: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def flash(self: Any) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def invoke(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def select(self: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleScale(AccessibleMixin, tk.Scale):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def coords(self: Any, value: Any = ...) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set(self: Any, value: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleScrollbar(AccessibleMixin, tk.Scrollbar):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def activate(self: Any, index: Any = ...) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def delta(self: Any, deltax: Any, deltay: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def fraction(self: Any, x: Any, y: Any) -> Any: ...
    def get(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set(self: Any, first: Any, last: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleListbox(AccessibleMixin, tk.Listbox):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def activate(self: Any, index: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, index: Any) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def curselection(self: Any) -> Any: ...
    def delete(self: Any, first: Any, last: Any = ...) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any, first: Any, last: Any = ...) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, index: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, index: Any, elements: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def itemcget(self: Any, index: Any, option: Any) -> Any: ...
    def itemconfig(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def itemconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def nearest(self: Any, y: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def scan_dragto(self: Any, x: Any, y: Any) -> Any: ...
    def scan_mark(self: Any, x: Any, y: Any) -> Any: ...
    def see(self: Any, index: Any) -> Any: ...
    def select_anchor(self: Any, index: Any) -> Any: ...
    def select_clear(self: Any, first: Any, last: Any = ...) -> Any: ...
    def select_includes(self: Any, index: Any) -> Any: ...
    def select_set(self: Any, first: Any, last: Any = ...) -> Any: ...
    def selection_anchor(self: Any, index: Any) -> Any: ...
    def selection_clear(self: Any, first: Any, last: Any = ...) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_includes(self: Any, index: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def selection_set(self: Any, first: Any, last: Any = ...) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def xview(self: Any, args: Any) -> Any: ...
    def xview_moveto(self: Any, fraction: Any) -> Any: ...
    def xview_scroll(self: Any, number: Any, what: Any) -> Any: ...
    def yview(self: Any, args: Any) -> Any: ...
    def yview_moveto(self: Any, fraction: Any) -> Any: ...
    def yview_scroll(self: Any, number: Any, what: Any) -> Any: ...

class AccessibleMenu(AccessibleMixin, tk.Menu):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def activate(self: Any, index: Any) -> Any: ...
    def add(self: Any, itemType: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def add_cascade(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def add_checkbutton(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def add_command(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_radiobutton(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def add_separator(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def delete(self: Any, index1: Any, index2: Any = ...) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def entrycget(self: Any, index: Any, option: Any) -> Any: ...
    def entryconfig(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def entryconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, index: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, index: Any, itemType: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def insert_cascade(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def insert_checkbutton(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def insert_command(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def insert_radiobutton(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def insert_separator(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def invoke(self: Any, index: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def post(self: Any, x: Any, y: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_popup(self: Any, x: Any, y: Any, entry: Any = ...) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def type(self: Any, index: Any) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def unpost(self: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def xposition(self: Any, index: Any) -> Any: ...
    def yposition(self: Any, index: Any) -> Any: ...

class AccessibleMenubutton(AccessibleMixin, tk.Menubutton):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleFrame(AccessibleMixin, tk.Frame):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleLabelFrame(AccessibleMixin, tk.LabelFrame):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleToplevel(AccessibleMixin, tk.Toplevel):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def aspect(self: Any, minNumer: Any = ..., minDenom: Any = ..., maxNumer: Any = ..., maxDenom: Any = ...) -> Any: ...
    def attributes(self: Any, args: Any, return_python_dict: Any = ..., kwargs: Any) -> Any: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def client(self: Any, name: Any = ...) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def colormapwindows(self: Any, wlist: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def command(self: Any, value: Any = ...) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deiconify(self: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def focusmodel(self: Any, model: Any = ...) -> Any: ...
    def forget(self: Any, window: Any) -> Any: ...
    def frame(self: Any) -> Any: ...
    def geometry(self: Any, newGeometry: Any = ...) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, baseWidth: Any = ..., baseHeight: Any = ..., widthInc: Any = ..., heightInc: Any = ...) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def group(self: Any, pathName: Any = ...) -> Any: ...
    def iconbitmap(self: Any, bitmap: Any = ..., default: Any = ...) -> Any: ...
    def iconify(self: Any) -> Any: ...
    def iconmask(self: Any, bitmap: Any = ...) -> Any: ...
    def iconname(self: Any, newName: Any = ...) -> Any: ...
    def iconphoto(self: Any, default: Any = ..., args: Any) -> Any: ...
    def iconposition(self: Any, x: Any = ..., y: Any = ...) -> Any: ...
    def iconwindow(self: Any, pathName: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def manage(self: Any, widget: Any) -> Any: ...
    def maxsize(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def minsize(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def overrideredirect(self: Any, boolean: Any = ...) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def positionfrom(self: Any, who: Any = ...) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def protocol(self: Any, name: Any = ..., func: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def resizable(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def sizefrom(self: Any, who: Any = ...) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, newstate: Any = ...) -> Any: ...
    def title(self: Any, string: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def transient(self: Any, master: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def withdraw(self: Any) -> Any: ...
    def wm_aspect(self: Any, minNumer: Any = ..., minDenom: Any = ..., maxNumer: Any = ..., maxDenom: Any = ...) -> Any: ...
    def wm_attributes(self: Any, args: Any, return_python_dict: Any = ..., kwargs: Any) -> Any: ...
    def wm_client(self: Any, name: Any = ...) -> Any: ...
    def wm_colormapwindows(self: Any, wlist: Any) -> Any: ...
    def wm_command(self: Any, value: Any = ...) -> Any: ...
    def wm_deiconify(self: Any) -> Any: ...
    def wm_focusmodel(self: Any, model: Any = ...) -> Any: ...
    def wm_forget(self: Any, window: Any) -> Any: ...
    def wm_frame(self: Any) -> Any: ...
    def wm_geometry(self: Any, newGeometry: Any = ...) -> Any: ...
    def wm_grid(self: Any, baseWidth: Any = ..., baseHeight: Any = ..., widthInc: Any = ..., heightInc: Any = ...) -> Any: ...
    def wm_group(self: Any, pathName: Any = ...) -> Any: ...
    def wm_iconbitmap(self: Any, bitmap: Any = ..., default: Any = ...) -> Any: ...
    def wm_iconify(self: Any) -> Any: ...
    def wm_iconmask(self: Any, bitmap: Any = ...) -> Any: ...
    def wm_iconname(self: Any, newName: Any = ...) -> Any: ...
    def wm_iconphoto(self: Any, default: Any = ..., args: Any) -> Any: ...
    def wm_iconposition(self: Any, x: Any = ..., y: Any = ...) -> Any: ...
    def wm_iconwindow(self: Any, pathName: Any = ...) -> Any: ...
    def wm_manage(self: Any, widget: Any) -> Any: ...
    def wm_maxsize(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def wm_minsize(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def wm_overrideredirect(self: Any, boolean: Any = ...) -> Any: ...
    def wm_positionfrom(self: Any, who: Any = ...) -> Any: ...
    def wm_protocol(self: Any, name: Any = ..., func: Any = ...) -> Any: ...
    def wm_resizable(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def wm_sizefrom(self: Any, who: Any = ...) -> Any: ...
    def wm_state(self: Any, newstate: Any = ...) -> Any: ...
    def wm_title(self: Any, string: Any = ...) -> Any: ...
    def wm_transient(self: Any, master: Any = ...) -> Any: ...
    def wm_withdraw(self: Any) -> Any: ...

class AccessibleCanvas(AccessibleMixin, tk.Canvas):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def addtag(self: Any, args: Any) -> Any: ...
    def addtag_above(self: Any, newtag: Any, tagOrId: Any) -> Any: ...
    def addtag_all(self: Any, newtag: Any) -> Any: ...
    def addtag_below(self: Any, newtag: Any, tagOrId: Any) -> Any: ...
    def addtag_closest(self: Any, newtag: Any, x: Any, y: Any, halo: Any = ..., start: Any = ...) -> Any: ...
    def addtag_enclosed(self: Any, newtag: Any, x1: Any, y1: Any, x2: Any, y2: Any) -> Any: ...
    def addtag_overlapping(self: Any, newtag: Any, x1: Any, y1: Any, x2: Any, y2: Any) -> Any: ...
    def addtag_withtag(self: Any, newtag: Any, tagOrId: Any) -> Any: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, args: Any) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def canvasx(self: Any, screenx: Any, gridspacing: Any = ...) -> Any: ...
    def canvasy(self: Any, screeny: Any, gridspacing: Any = ...) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def coords(self: Any, args: Any) -> Any: ...
    def create_arc(self: Any, args: Any, kw: Any) -> Any: ...
    def create_bitmap(self: Any, args: Any, kw: Any) -> Any: ...
    def create_image(self: Any, args: Any, kw: Any) -> Any: ...
    def create_line(self: Any, args: Any, kw: Any) -> Any: ...
    def create_oval(self: Any, args: Any, kw: Any) -> Any: ...
    def create_polygon(self: Any, args: Any, kw: Any) -> Any: ...
    def create_rectangle(self: Any, args: Any, kw: Any) -> Any: ...
    def create_text(self: Any, args: Any, kw: Any) -> Any: ...
    def create_window(self: Any, args: Any, kw: Any) -> Any: ...
    def dchars(self: Any, args: Any) -> Any: ...
    def delete(self: Any, args: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def dtag(self: Any, args: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def find(self: Any, args: Any) -> Any: ...
    def find_above(self: Any, tagOrId: Any) -> Any: ...
    def find_all(self: Any) -> Any: ...
    def find_below(self: Any, tagOrId: Any) -> Any: ...
    def find_closest(self: Any, x: Any, y: Any, halo: Any = ..., start: Any = ...) -> Any: ...
    def find_enclosed(self: Any, x1: Any, y1: Any, x2: Any, y2: Any) -> Any: ...
    def find_overlapping(self: Any, x1: Any, y1: Any, x2: Any, y2: Any) -> Any: ...
    def find_withtag(self: Any, tagOrId: Any) -> Any: ...
    def focus(self: Any, args: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def gettags(self: Any, args: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def icursor(self: Any, args: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, args: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, args: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def itemcget(self: Any, tagOrId: Any, option: Any) -> Any: ...
    def itemconfig(self: Any, tagOrId: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def itemconfigure(self: Any, tagOrId: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, args: Any) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, args: Any) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def move(self: Any, args: Any) -> Any: ...
    def moveto(self: Any, tagOrId: Any, x: Any = ..., y: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def postscript(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def scale(self: Any, args: Any) -> Any: ...
    def scan_dragto(self: Any, x: Any, y: Any, gain: Any = ...) -> Any: ...
    def scan_mark(self: Any, x: Any, y: Any) -> Any: ...
    def select_adjust(self: Any, tagOrId: Any, index: Any) -> Any: ...
    def select_clear(self: Any) -> Any: ...
    def select_from(self: Any, tagOrId: Any, index: Any) -> Any: ...
    def select_item(self: Any) -> Any: ...
    def select_to(self: Any, tagOrId: Any, index: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tag_bind(self: Any, tagOrId: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def tag_lower(self: Any, args: Any) -> Any: ...
    def tag_raise(self: Any, args: Any) -> Any: ...
    def tag_unbind(self: Any, tagOrId: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, args: Any) -> Any: ...
    def type(self: Any, tagOrId: Any) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def xview(self: Any, args: Any) -> Any: ...
    def xview_moveto(self: Any, fraction: Any) -> Any: ...
    def xview_scroll(self: Any, number: Any, what: Any) -> Any: ...
    def yview(self: Any, args: Any) -> Any: ...
    def yview_moveto(self: Any, fraction: Any) -> Any: ...
    def yview_scroll(self: Any, number: Any, what: Any) -> Any: ...

class AccessibleMessage(AccessibleMixin, tk.Message):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleSpinbox(AccessibleMixin, tk.Spinbox):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, index: Any) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def delete(self: Any, first: Any, last: Any = ...) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def icursor(self: Any, index: Any) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, index: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, index: Any, s: Any) -> Any: ...
    def invoke(self: Any, element: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def scan(self: Any, args: Any) -> Any: ...
    def scan_dragto(self: Any, x: Any) -> Any: ...
    def scan_mark(self: Any, x: Any) -> Any: ...
    def selection(self: Any, args: Any) -> Any: ...
    def selection_adjust(self: Any, index: Any) -> Any: ...
    def selection_clear(self: Any) -> Any: ...
    def selection_element(self: Any, element: Any = ...) -> Any: ...
    def selection_from(self: Any, index: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def selection_present(self: Any) -> Any: ...
    def selection_range(self: Any, start: Any, end: Any) -> Any: ...
    def selection_to(self: Any, index: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def xview(self: Any, args: Any) -> Any: ...
    def xview_moveto(self: Any, fraction: Any) -> Any: ...
    def xview_scroll(self: Any, number: Any, what: Any) -> Any: ...

class AccessiblePanedWindow(AccessibleMixin, tk.PanedWindow):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add(self: Any, child: Any, kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any, child: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def panecget(self: Any, child: Any, option: Any) -> Any: ...
    def paneconfig(self: Any, tagOrId: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def paneconfigure(self: Any, tagOrId: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def panes(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def proxy(self: Any, args: Any) -> Any: ...
    def proxy_coord(self: Any) -> Any: ...
    def proxy_forget(self: Any) -> Any: ...
    def proxy_place(self: Any, x: Any, y: Any) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove(self: Any, child: Any) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def sash(self: Any, args: Any) -> Any: ...
    def sash_coord(self: Any, index: Any) -> Any: ...
    def sash_mark(self: Any, index: Any) -> Any: ...
    def sash_place(self: Any, index: Any, x: Any, y: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleTTKButton(AccessibleMixin, tk.Button):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def invoke(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleTTKEntry(AccessibleMixin, tk.Entry):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, index: Any) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def delete(self: Any, first: Any, last: Any = ...) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def icursor(self: Any, index: Any) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, index: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, index: Any, string: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def scan_dragto(self: Any, x: Any) -> Any: ...
    def scan_mark(self: Any, x: Any) -> Any: ...
    def select_adjust(self: Any, index: Any) -> Any: ...
    def select_clear(self: Any) -> Any: ...
    def select_from(self: Any, index: Any) -> Any: ...
    def select_present(self: Any) -> Any: ...
    def select_range(self: Any, start: Any, end: Any) -> Any: ...
    def select_to(self: Any, index: Any) -> Any: ...
    def selection_adjust(self: Any, index: Any) -> Any: ...
    def selection_clear(self: Any) -> Any: ...
    def selection_from(self: Any, index: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def selection_present(self: Any) -> Any: ...
    def selection_range(self: Any, start: Any, end: Any) -> Any: ...
    def selection_to(self: Any, index: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def xview(self: Any, args: Any) -> Any: ...
    def xview_moveto(self: Any, fraction: Any) -> Any: ...
    def xview_scroll(self: Any, number: Any, what: Any) -> Any: ...

class AccessibleTTKLabel(AccessibleMixin, tk.Label):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleTTKCheckbutton(AccessibleMixin, tk.Checkbutton):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def invoke(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleTTKRadiobutton(AccessibleMixin, tk.Radiobutton):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def invoke(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleTTKScale(AccessibleMixin, tk.Scale):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def coords(self: Any, value: Any = ...) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any, x: Any = ..., y: Any = ...) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set(self: Any, value: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleTTKScrollbar(AccessibleMixin, tk.Scrollbar):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def activate(self: Any, index: Any = ...) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def delta(self: Any, deltax: Any, deltay: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def fraction(self: Any, x: Any, y: Any) -> Any: ...
    def get(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set(self: Any, first: Any, last: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleTTKFrame(AccessibleMixin, tk.Frame):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleTTKLabelFrame(AccessibleMixin, tk.Labelframe):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleTTKNotebook(AccessibleMixin, tk.Notebook):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add(self: Any, child: Any, kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def enable_traversal(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any, tab_id: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def hide(self: Any, tab_id: Any) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, tab_id: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, pos: Any, child: Any, kw: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def select(self: Any, tab_id: Any = ...) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tab(self: Any, tab_id: Any, option: Any = ..., kw: Any) -> Any: ...
    def tabs(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleTTKProgressbar(AccessibleMixin, tk.Progressbar):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def start(self: Any, interval: Any = ...) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def step(self: Any, amount: Any = ...) -> Any: ...
    def stop(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleTTKSeparator(AccessibleMixin, tk.Separator):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleTTKSizegrip(AccessibleMixin, tk.Sizegrip):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleTTKTreeview(AccessibleMixin, tk.Treeview):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, item: Any, column: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def column(self: Any, column: Any, option: Any = ..., kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def delete(self: Any, items: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def detach(self: Any, items: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def exists(self: Any, item: Any) -> Any: ...
    def focus(self: Any, item: Any = ...) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def get_children(self: Any, item: Any = ...) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def heading(self: Any, column: Any, option: Any = ..., kw: Any) -> Any: ...
    def identify(self: Any, component: Any, x: Any, y: Any) -> Any: ...
    def identify_column(self: Any, x: Any) -> Any: ...
    def identify_element(self: Any, x: Any, y: Any) -> Any: ...
    def identify_region(self: Any, x: Any, y: Any) -> Any: ...
    def identify_row(self: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, item: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, parent: Any, index: Any, iid: Any = ..., kw: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def item(self: Any, item: Any, option: Any = ..., kw: Any) -> Any: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def move(self: Any, item: Any, parent: Any, index: Any) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def next(self: Any, item: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def parent(self: Any, item: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def prev(self: Any, item: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def reattach(self: Any, item: Any, parent: Any, index: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def see(self: Any, item: Any) -> Any: ...
    def selection(self: Any) -> Any: ...
    def selection_add(self: Any, items: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def selection_remove(self: Any, items: Any) -> Any: ...
    def selection_set(self: Any, items: Any) -> Any: ...
    def selection_toggle(self: Any, items: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set(self: Any, item: Any, column: Any = ..., value: Any = ...) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_children(self: Any, item: Any, newchildren: Any) -> Any: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tag_bind(self: Any, tagname: Any, sequence: Any = ..., callback: Any = ...) -> Any: ...
    def tag_configure(self: Any, tagname: Any, option: Any = ..., kw: Any) -> Any: ...
    def tag_has(self: Any, tagname: Any, item: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def xview(self: Any, args: Any) -> Any: ...
    def xview_moveto(self: Any, fraction: Any) -> Any: ...
    def xview_scroll(self: Any, number: Any, what: Any) -> Any: ...
    def yview(self: Any, args: Any) -> Any: ...
    def yview_moveto(self: Any, fraction: Any) -> Any: ...
    def yview_scroll(self: Any, number: Any, what: Any) -> Any: ...

class AccessibleTTKCombobox(AccessibleMixin, tk.Combobox):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, index: Any) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def current(self: Any, newindex: Any = ...) -> Any: ...
    def delete(self: Any, first: Any, last: Any = ...) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def icursor(self: Any, index: Any) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, index: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, index: Any, string: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def scan_dragto(self: Any, x: Any) -> Any: ...
    def scan_mark(self: Any, x: Any) -> Any: ...
    def select_adjust(self: Any, index: Any) -> Any: ...
    def select_clear(self: Any) -> Any: ...
    def select_from(self: Any, index: Any) -> Any: ...
    def select_present(self: Any) -> Any: ...
    def select_range(self: Any, start: Any, end: Any) -> Any: ...
    def select_to(self: Any, index: Any) -> Any: ...
    def selection_adjust(self: Any, index: Any) -> Any: ...
    def selection_clear(self: Any) -> Any: ...
    def selection_from(self: Any, index: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def selection_present(self: Any) -> Any: ...
    def selection_range(self: Any, start: Any, end: Any) -> Any: ...
    def selection_to(self: Any, index: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set(self: Any, value: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def xview(self: Any, args: Any) -> Any: ...
    def xview_moveto(self: Any, fraction: Any) -> Any: ...
    def xview_scroll(self: Any, number: Any, what: Any) -> Any: ...

class AccessibleTTKSpinbox(AccessibleMixin, tk.Spinbox):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, index: Any) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def delete(self: Any, first: Any, last: Any = ...) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def icursor(self: Any, index: Any) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, index: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, index: Any, string: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def scan_dragto(self: Any, x: Any) -> Any: ...
    def scan_mark(self: Any, x: Any) -> Any: ...
    def select_adjust(self: Any, index: Any) -> Any: ...
    def select_clear(self: Any) -> Any: ...
    def select_from(self: Any, index: Any) -> Any: ...
    def select_present(self: Any) -> Any: ...
    def select_range(self: Any, start: Any, end: Any) -> Any: ...
    def select_to(self: Any, index: Any) -> Any: ...
    def selection_adjust(self: Any, index: Any) -> Any: ...
    def selection_clear(self: Any) -> Any: ...
    def selection_from(self: Any, index: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def selection_present(self: Any) -> Any: ...
    def selection_range(self: Any, start: Any, end: Any) -> Any: ...
    def selection_to(self: Any, index: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set(self: Any, value: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def xview(self: Any, args: Any) -> Any: ...
    def xview_moveto(self: Any, fraction: Any) -> Any: ...
    def xview_scroll(self: Any, number: Any, what: Any) -> Any: ...

class AccessibleCTKButton(AccessibleMixin, tk.CTkButton):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: str = ..., command: Callable = ..., add: Union = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, attribute_name: str) -> any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, args: Any, kwargs: Any) -> Any: ...
    def configure(self: Any, require_redraw: Any = ..., kwargs: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, kwargs: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def invoke(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, kwargs: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, kwargs: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: str = ..., funcid: str = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleCTKEntry(AccessibleMixin, tk.CTkEntry):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., command: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, attribute_name: str) -> any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, args: Any, kwargs: Any) -> Any: ...
    def configure(self: Any, require_redraw: Any = ..., kwargs: Any) -> Any: ...
    def delete(self: Any, first_index: Any, last_index: Any = ...) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, kwargs: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def icursor(self: Any, index: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, index: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, index: Any, string: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, kwargs: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, kwargs: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def select_adjust(self: Any, index: Any) -> Any: ...
    def select_clear(self: Any) -> Any: ...
    def select_from(self: Any, index: Any) -> Any: ...
    def select_present(self: Any) -> Any: ...
    def select_range(self: Any, start_index: Any, end_index: Any) -> Any: ...
    def select_to(self: Any, index: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any = ..., funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def xview(self: Any, index: Any) -> Any: ...
    def xview_moveto(self: Any, f: Any) -> Any: ...
    def xview_scroll(self: Any, number: Any, what: Any) -> Any: ...

class AccessibleCTKLabel(AccessibleMixin, tk.CTkLabel):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: str = ..., command: Callable = ..., add: str = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, attribute_name: str) -> any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, args: Any, kwargs: Any) -> Any: ...
    def configure(self: Any, require_redraw: Any = ..., kwargs: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, kwargs: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, kwargs: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, kwargs: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: str = ..., funcid: Optional = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleCTKCheckBox(AccessibleMixin, tk.CTkCheckBox):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: str = ..., command: Callable = ..., add: Union = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, attribute_name: str) -> any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, args: Any, kwargs: Any) -> Any: ...
    def configure(self: Any, require_redraw: Any = ..., kwargs: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def deselect(self: Any, from_variable_callback: Any = ...) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any) -> Union: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, kwargs: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, kwargs: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, kwargs: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def select(self: Any, from_variable_callback: Any = ...) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def toggle(self: Any, event: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: str = ..., funcid: str = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleCTKRadioButton(AccessibleMixin, tk.CTkRadioButton):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: str = ..., command: Callable = ..., add: Union = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, attribute_name: str) -> any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, args: Any, kwargs: Any) -> Any: ...
    def configure(self: Any, require_redraw: Any = ..., kwargs: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def deselect(self: Any, from_variable_callback: Any = ...) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, kwargs: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def invoke(self: Any, event: Any = ...) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, kwargs: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, kwargs: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def select(self: Any, from_variable_callback: Any = ...) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: str = ..., funcid: str = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleCTKSlider(AccessibleMixin, tk.CTkSlider):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: str = ..., command: Callable = ..., add: Union = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, attribute_name: str) -> any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, args: Any, kwargs: Any) -> Any: ...
    def configure(self: Any, require_redraw: Any = ..., kwargs: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any) -> float: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, kwargs: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, kwargs: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, kwargs: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set(self: Any, output_value: Any, from_variable_callback: Any = ...) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: str = ..., funcid: str = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleCTKScrollbar(AccessibleMixin, tk.CTkScrollbar):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., command: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, attribute_name: str) -> any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, args: Any, kwargs: Any) -> Any: ...
    def configure(self: Any, require_redraw: Any = ..., kwargs: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, kwargs: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, kwargs: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, kwargs: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set(self: Any, start_value: float, end_value: float) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any = ..., funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleCTKFrame(AccessibleMixin, tk.CTkFrame):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., command: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, attribute_name: str) -> any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, args: Any, kwargs: Any) -> Any: ...
    def configure(self: Any, require_redraw: Any = ..., kwargs: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, kwargs: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, kwargs: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, kwargs: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any = ..., funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> List: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleCTKTabview(AccessibleMixin, tk.CTkTabview):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add(self: Any, name: str) -> CTkFrame: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., command: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, attribute_name: str) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, args: Any, kwargs: Any) -> Any: ...
    def configure(self: Any, require_redraw: Any = ..., kwargs: Any) -> Any: ...
    def delete(self: Any, name: str) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any) -> str: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, kwargs: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, name: Any) -> int: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, index: int, name: str) -> CTkFrame: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def move(self: Any, new_index: int, name: str) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, kwargs: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, kwargs: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rename(self: Any, old_name: str, new_name: str) -> Any: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set(self: Any, name: str) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tab(self: Any, name: str) -> CTkFrame: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any = ..., funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> List: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleCTKProgressBar(AccessibleMixin, tk.CTkProgressBar):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: str = ..., command: Callable = ..., add: Union = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, attribute_name: str) -> any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, args: Any, kwargs: Any) -> Any: ...
    def configure(self: Any, require_redraw: Any = ..., kwargs: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any) -> float: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, kwargs: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, kwargs: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, kwargs: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set(self: Any, value: Any, from_variable_callback: Any = ...) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def start(self: Any) -> Any: ...
    def step(self: Any) -> Any: ...
    def stop(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: str = ..., funcid: str = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleCTKSwitch(AccessibleMixin, tk.CTkSwitch):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: str = ..., command: Callable = ..., add: Union = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, attribute_name: str) -> any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, args: Any, kwargs: Any) -> Any: ...
    def configure(self: Any, require_redraw: Any = ..., kwargs: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def deselect(self: Any, from_variable_callback: Any = ...) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any) -> Union: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, kwargs: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, kwargs: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, kwargs: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def select(self: Any, from_variable_callback: Any = ...) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def toggle(self: Any, event: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: str = ..., funcid: str = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleCTKComboBox(AccessibleMixin, tk.CTkComboBox):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., command: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, attribute_name: str) -> any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, args: Any, kwargs: Any) -> Any: ...
    def configure(self: Any, require_redraw: Any = ..., kwargs: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any) -> str: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, kwargs: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, kwargs: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, kwargs: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set(self: Any, value: str) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any = ..., funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleCTKTextbox(AccessibleMixin, tk.CTkTextbox):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, index: Any) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: str = ..., command: Callable = ..., add: Union = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, attribute_name: str) -> any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def compare(self: Any, index: Any, op: Any, index2: Any) -> Any: ...
    def config(self: Any, args: Any, kwargs: Any) -> Any: ...
    def configure(self: Any, require_redraw: Any = ..., kwargs: Any) -> Any: ...
    def delete(self: Any, index1: Any, index2: Any = ...) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def dlineinfo(self: Any, index: Any) -> Any: ...
    def edit_modified(self: Any, arg: Any = ...) -> Any: ...
    def edit_redo(self: Any) -> Any: ...
    def edit_reset(self: Any) -> Any: ...
    def edit_separator(self: Any) -> Any: ...
    def edit_undo(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any, index1: Any, index2: Any = ...) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, kwargs: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_cget(self: Any, index: Any, option: Any) -> Any: ...
    def image_configure(self: Any, index: Any) -> Any: ...
    def image_create(self: Any, index: Any, kwargs: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, i: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, index: Any, text: Any, tags: Any = ...) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def mark_gravity(self: Any, mark: Any, gravity: Any = ...) -> Any: ...
    def mark_names(self: Any) -> Any: ...
    def mark_next(self: Any, index: Any) -> Any: ...
    def mark_previous(self: Any, index: Any) -> Any: ...
    def mark_set(self: Any, mark: Any, index: Any) -> Any: ...
    def mark_unset(self: Any, mark: Any) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, kwargs: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, kwargs: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def scan_dragto(self: Any, x: Any, y: Any) -> Any: ...
    def scan_mark(self: Any, x: Any, y: Any) -> Any: ...
    def search(self: Any, pattern: Any, index: Any, args: Any, kwargs: Any) -> Any: ...
    def see(self: Any, index: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tag_add(self: Any, tagName: Any, index1: Any, index2: Any = ...) -> Any: ...
    def tag_bind(self: Any, tagName: Any, sequence: Any, func: Any, add: Any = ...) -> Any: ...
    def tag_cget(self: Any, tagName: Any, option: Any) -> Any: ...
    def tag_config(self: Any, tagName: Any, kwargs: Any) -> Any: ...
    def tag_delete(self: Any, tagName: Any) -> Any: ...
    def tag_lower(self: Any, tagName: Any, belowThis: Any = ...) -> Any: ...
    def tag_names(self: Any, index: Any = ...) -> Any: ...
    def tag_nextrange(self: Any, tagName: Any, index1: Any, index2: Any = ...) -> Any: ...
    def tag_prevrange(self: Any, tagName: Any, index1: Any, index2: Any = ...) -> Any: ...
    def tag_raise(self: Any, tagName: Any, aboveThis: Any = ...) -> Any: ...
    def tag_ranges(self: Any, tagName: Any) -> Any: ...
    def tag_remove(self: Any, tagName: Any, index1: Any, index2: Any = ...) -> Any: ...
    def tag_unbind(self: Any, tagName: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: str = ..., funcid: str = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def window_cget(self: Any, index: Any, option: Any) -> Any: ...
    def window_configure(self: Any, index: Any, option: Any) -> Any: ...
    def window_create(self: Any, index: Any, kwargs: Any) -> Any: ...
    def window_names(self: Any) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def xview(self: Any, args: Any) -> Any: ...
    def xview_moveto(self: Any, fraction: Any) -> Any: ...
    def xview_scroll(self: Any, n: Any, what: Any) -> Any: ...
    def yview(self: Any, args: Any) -> Any: ...
    def yview_moveto(self: Any, fraction: Any) -> Any: ...
    def yview_scroll(self: Any, n: Any, what: Any) -> Any: ...

class AccessibleCTKScrollableFrame(AccessibleMixin, tk.CTkScrollableFrame):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, attribute_name: str) -> Any: ...
    def check_if_master_is_canvas(self: Any, widget: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, kwargs: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, kwargs: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any, kwargs: Any) -> Any: ...
    def grid_info(self: Any, kwargs: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, kwargs: Any) -> Any: ...
    def grid_remove(self: Any, kwargs: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, kwargs: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, kwargs: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any, kwargs: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleCTKToplevel(AccessibleMixin, tk.CTkToplevel):
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def aspect(self: Any, minNumer: Any = ..., minDenom: Any = ..., maxNumer: Any = ..., maxDenom: Any = ...) -> Any: ...
    def attributes(self: Any, args: Any, return_python_dict: Any = ..., kwargs: Any) -> Any: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def block_update_dimensions_event(self: Any) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, attribute_name: str) -> any: ...
    def client(self: Any, name: Any = ...) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def colormapwindows(self: Any, wlist: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def command(self: Any, value: Any = ...) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, kwargs: Any) -> Any: ...
    def deiconify(self: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def focusmodel(self: Any, model: Any = ...) -> Any: ...
    def forget(self: Any, window: Any) -> Any: ...
    def frame(self: Any) -> Any: ...
    def geometry(self: Any, geometry_string: str = ...) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, baseWidth: Any = ..., baseHeight: Any = ..., widthInc: Any = ..., heightInc: Any = ...) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def group(self: Any, pathName: Any = ...) -> Any: ...
    def iconbitmap(self: Any, bitmap: Any = ..., default: Any = ...) -> Any: ...
    def iconify(self: Any) -> Any: ...
    def iconmask(self: Any, bitmap: Any = ...) -> Any: ...
    def iconname(self: Any, newName: Any = ...) -> Any: ...
    def iconphoto(self: Any, default: Any = ..., args: Any) -> Any: ...
    def iconposition(self: Any, x: Any = ..., y: Any = ...) -> Any: ...
    def iconwindow(self: Any, pathName: Any = ...) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def manage(self: Any, widget: Any) -> Any: ...
    def maxsize(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def minsize(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def overrideredirect(self: Any, boolean: Any = ...) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def positionfrom(self: Any, who: Any = ...) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def protocol(self: Any, name: Any = ..., func: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def resizable(self: Any, width: bool = ..., height: bool = ...) -> Any: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def sizefrom(self: Any, who: Any = ...) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, newstate: Any = ...) -> Any: ...
    def title(self: Any, string: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def transient(self: Any, master: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def unblock_update_dimensions_event(self: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def withdraw(self: Any) -> Any: ...
    def wm_aspect(self: Any, minNumer: Any = ..., minDenom: Any = ..., maxNumer: Any = ..., maxDenom: Any = ...) -> Any: ...
    def wm_attributes(self: Any, args: Any, return_python_dict: Any = ..., kwargs: Any) -> Any: ...
    def wm_client(self: Any, name: Any = ...) -> Any: ...
    def wm_colormapwindows(self: Any, wlist: Any) -> Any: ...
    def wm_command(self: Any, value: Any = ...) -> Any: ...
    def wm_deiconify(self: Any) -> Any: ...
    def wm_focusmodel(self: Any, model: Any = ...) -> Any: ...
    def wm_forget(self: Any, window: Any) -> Any: ...
    def wm_frame(self: Any) -> Any: ...
    def wm_geometry(self: Any, newGeometry: Any = ...) -> Any: ...
    def wm_grid(self: Any, baseWidth: Any = ..., baseHeight: Any = ..., widthInc: Any = ..., heightInc: Any = ...) -> Any: ...
    def wm_group(self: Any, pathName: Any = ...) -> Any: ...
    def wm_iconbitmap(self: Any, bitmap: Any = ..., default: Any = ...) -> Any: ...
    def wm_iconify(self: Any) -> Any: ...
    def wm_iconmask(self: Any, bitmap: Any = ...) -> Any: ...
    def wm_iconname(self: Any, newName: Any = ...) -> Any: ...
    def wm_iconphoto(self: Any, default: Any = ..., args: Any) -> Any: ...
    def wm_iconposition(self: Any, x: Any = ..., y: Any = ...) -> Any: ...
    def wm_iconwindow(self: Any, pathName: Any = ...) -> Any: ...
    def wm_manage(self: Any, widget: Any) -> Any: ...
    def wm_maxsize(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def wm_minsize(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def wm_overrideredirect(self: Any, boolean: Any = ...) -> Any: ...
    def wm_positionfrom(self: Any, who: Any = ...) -> Any: ...
    def wm_protocol(self: Any, name: Any = ..., func: Any = ...) -> Any: ...
    def wm_resizable(self: Any, width: Any = ..., height: Any = ...) -> Any: ...
    def wm_sizefrom(self: Any, who: Any = ...) -> Any: ...
    def wm_state(self: Any, newstate: Any = ...) -> Any: ...
    def wm_title(self: Any, string: Any = ...) -> Any: ...
    def wm_transient(self: Any, master: Any = ...) -> Any: ...
    def wm_withdraw(self: Any) -> Any: ...

class AccessibleNotebook(AccessibleMixin, tk.Notebook):
    """Accessible Notebook with tab navigation and announcements"""
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add(self: Any, child: Any, kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def enable_traversal(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any, tab_id: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def hide(self: Any, tab_id: Any) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, tab_id: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, pos: Any, child: Any, kw: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def select(self: Any, tab_id: Any = ...) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tab(self: Any, tab_id: Any, option: Any = ..., kw: Any) -> Any: ...
    def tabs(self: Any) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...

class AccessibleTreeview(AccessibleMixin, tk.Treeview):
    """Accessible Treeview with enhanced keyboard navigation"""
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, item: Any, column: Any = ...) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def column(self: Any, column: Any, option: Any = ..., kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def delete(self: Any, items: Any) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def detach(self: Any, items: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def exists(self: Any, item: Any) -> Any: ...
    def focus(self: Any, item: Any = ...) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def get_children(self: Any, item: Any = ...) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def heading(self: Any, column: Any, option: Any = ..., kw: Any) -> Any: ...
    def identify(self: Any, component: Any, x: Any, y: Any) -> Any: ...
    def identify_column(self: Any, x: Any) -> Any: ...
    def identify_element(self: Any, x: Any, y: Any) -> Any: ...
    def identify_region(self: Any, x: Any, y: Any) -> Any: ...
    def identify_row(self: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, item: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, parent: Any, index: Any, iid: Any = ..., kw: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def item(self: Any, item: Any, option: Any = ..., kw: Any) -> Any: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def move(self: Any, item: Any, parent: Any, index: Any) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def next(self: Any, item: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def parent(self: Any, item: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def prev(self: Any, item: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def reattach(self: Any, item: Any, parent: Any, index: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def see(self: Any, item: Any) -> Any: ...
    def selection(self: Any) -> Any: ...
    def selection_add(self: Any, items: Any) -> Any: ...
    def selection_clear(self: Any, kw: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def selection_remove(self: Any, items: Any) -> Any: ...
    def selection_set(self: Any, items: Any) -> Any: ...
    def selection_toggle(self: Any, items: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set(self: Any, item: Any, column: Any = ..., value: Any = ...) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_children(self: Any, item: Any, newchildren: Any) -> Any: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tag_bind(self: Any, tagname: Any, sequence: Any = ..., callback: Any = ...) -> Any: ...
    def tag_configure(self: Any, tagname: Any, option: Any = ..., kw: Any) -> Any: ...
    def tag_has(self: Any, tagname: Any, item: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def xview(self: Any, args: Any) -> Any: ...
    def xview_moveto(self: Any, fraction: Any) -> Any: ...
    def xview_scroll(self: Any, number: Any, what: Any) -> Any: ...
    def yview(self: Any, args: Any) -> Any: ...
    def yview_moveto(self: Any, fraction: Any) -> Any: ...
    def yview_scroll(self: Any, number: Any, what: Any) -> Any: ...

class AccessibleCombobox(AccessibleMixin, tk.Combobox):
    """Accessible Combobox with enhanced announcements"""
    def __init__(self: Any, master: Any = ..., accessible_name: str = ..., kw: Any) -> Any: ...
    def add_focus_callback(self: Any, callback: Callable) -> None: ...
    def add_state_change_callback(self: Any, callback: Callable) -> None: ...
    def after(self: Any, ms: Any, func: Any = ..., args: Any) -> Any: ...
    def after_cancel(self: Any, id: Any) -> Any: ...
    def after_idle(self: Any, func: Any, args: Any) -> Any: ...
    def after_info(self: Any, id: Any = ...) -> Any: ...
    def anchor(self: Any, anchor: Any = ...) -> Any: ...
    def announce(self: Any, message: str, priority: str = ...) -> None: ...
    def bbox(self: Any, index: Any) -> Any: ...
    def bell(self: Any, displayof: Any = ...) -> Any: ...
    def bind(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_all(self: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bind_class(self: Any, className: Any, sequence: Any = ..., func: Any = ..., add: Any = ...) -> Any: ...
    def bindtags(self: Any, tagList: Any = ...) -> Any: ...
    def busy(self: Any, kw: Any) -> Any: ...
    def busy_cget(self: Any, option: Any) -> Any: ...
    def busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def busy_forget(self: Any) -> Any: ...
    def busy_hold(self: Any, kw: Any) -> Any: ...
    def busy_status(self: Any) -> Any: ...
    def cget(self: Any, key: Any) -> Any: ...
    def clipboard_append(self: Any, string: Any, kw: Any) -> Any: ...
    def clipboard_clear(self: Any, kw: Any) -> Any: ...
    def clipboard_get(self: Any, kw: Any) -> Any: ...
    def columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def current(self: Any, newindex: Any = ...) -> Any: ...
    def delete(self: Any, first: Any, last: Any = ...) -> Any: ...
    def deletecommand(self: Any, name: Any) -> Any: ...
    def destroy(self: Any) -> Any: ...
    def event_add(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_delete(self: Any, virtual: Any, sequences: Any) -> Any: ...
    def event_generate(self: Any, sequence: Any, kw: Any) -> Any: ...
    def event_info(self: Any, virtual: Any = ...) -> Any: ...
    def focus(self: Any) -> Any: ...
    def focus_displayof(self: Any) -> Any: ...
    def focus_force(self: Any) -> Any: ...
    def focus_get(self: Any) -> Any: ...
    def focus_lastfor(self: Any) -> Any: ...
    def focus_set(self: Any) -> Any: ...
    def forget(self: Any) -> Any: ...
    def get(self: Any) -> Any: ...
    def get_accessibility_info(self: Any) -> Dict: ...
    def get_aria_property(self: Any, property: ARIAProperty) -> Any: ...
    def getboolean(self: Any, s: Any) -> Any: ...
    def getdouble(self: Any, s: Any) -> Any: ...
    def getint(self: Any, s: Any) -> Any: ...
    def getvar(self: Any, name: Any = ...) -> Any: ...
    def grab_current(self: Any) -> Any: ...
    def grab_release(self: Any) -> Any: ...
    def grab_set(self: Any) -> Any: ...
    def grab_set_global(self: Any) -> Any: ...
    def grab_status(self: Any) -> Any: ...
    def grid(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_anchor(self: Any, anchor: Any = ...) -> Any: ...
    def grid_bbox(self: Any, column: Any = ..., row: Any = ..., col2: Any = ..., row2: Any = ...) -> Any: ...
    def grid_columnconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_forget(self: Any) -> Any: ...
    def grid_info(self: Any) -> Any: ...
    def grid_location(self: Any, x: Any, y: Any) -> Any: ...
    def grid_propagate(self: Any, flag: Any = ...) -> Any: ...
    def grid_remove(self: Any) -> Any: ...
    def grid_rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def grid_size(self: Any) -> Any: ...
    def grid_slaves(self: Any, row: Any = ..., column: Any = ...) -> Any: ...
    def icursor(self: Any, index: Any) -> Any: ...
    def identify(self: Any, x: Any, y: Any) -> Any: ...
    def image_names(self: Any) -> Any: ...
    def image_types(self: Any) -> Any: ...
    def index(self: Any, index: Any) -> Any: ...
    def info(self: Any) -> Any: ...
    def info_patchlevel(self: Any) -> Any: ...
    def insert(self: Any, index: Any, string: Any) -> Any: ...
    def instate(self: Any, statespec: Any, callback: Any = ..., args: Any, kw: Any) -> Any: ...
    def is_accessible(self: Any) -> bool: ...
    def keys(self: Any) -> Any: ...
    def lift(self: Any, aboveThis: Any = ...) -> Any: ...
    def location(self: Any, x: Any, y: Any) -> Any: ...
    def lower(self: Any, belowThis: Any = ...) -> Any: ...
    def mainloop(self: Any, n: Any = ...) -> Any: ...
    def nametowidget(self: Any, name: Any) -> Any: ...
    def option_add(self: Any, pattern: Any, value: Any, priority: Any = ...) -> Any: ...
    def option_clear(self: Any) -> Any: ...
    def option_get(self: Any, name: Any, className: Any) -> Any: ...
    def option_readfile(self: Any, fileName: Any, priority: Any = ...) -> Any: ...
    def pack(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def pack_forget(self: Any) -> Any: ...
    def pack_info(self: Any) -> Any: ...
    def pack_propagate(self: Any, flag: Any = ...) -> Any: ...
    def pack_slaves(self: Any) -> Any: ...
    def place(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def place_forget(self: Any) -> Any: ...
    def place_info(self: Any) -> Any: ...
    def place_slaves(self: Any) -> Any: ...
    def propagate(self: Any, flag: Any = ...) -> Any: ...
    def quit(self: Any) -> Any: ...
    def register(self: Any, func: Any, subst: Any = ..., needcleanup: Any = ...) -> Any: ...
    def remove_focus_callback(self: Any, callback: Callable) -> None: ...
    def remove_keyboard_shortcut(self: Any, key: str) -> None: ...
    def remove_state_change_callback(self: Any, callback: Callable) -> None: ...
    def rowconfigure(self: Any, index: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def scan_dragto(self: Any, x: Any) -> Any: ...
    def scan_mark(self: Any, x: Any) -> Any: ...
    def select_adjust(self: Any, index: Any) -> Any: ...
    def select_clear(self: Any) -> Any: ...
    def select_from(self: Any, index: Any) -> Any: ...
    def select_present(self: Any) -> Any: ...
    def select_range(self: Any, start: Any, end: Any) -> Any: ...
    def select_to(self: Any, index: Any) -> Any: ...
    def selection_adjust(self: Any, index: Any) -> Any: ...
    def selection_clear(self: Any) -> Any: ...
    def selection_from(self: Any, index: Any) -> Any: ...
    def selection_get(self: Any, kw: Any) -> Any: ...
    def selection_handle(self: Any, command: Any, kw: Any) -> Any: ...
    def selection_own(self: Any, kw: Any) -> Any: ...
    def selection_own_get(self: Any, kw: Any) -> Any: ...
    def selection_present(self: Any) -> Any: ...
    def selection_range(self: Any, start: Any, end: Any) -> Any: ...
    def selection_to(self: Any, index: Any) -> Any: ...
    def send(self: Any, interp: Any, cmd: Any, args: Any) -> Any: ...
    def set(self: Any, value: Any) -> Any: ...
    def set_accessible_description(self: Any, description: str) -> None: ...
    def set_accessible_name(self: Any, name: str) -> None: ...
    def set_accessible_role(self: Any, role: str) -> None: ...
    def set_accessible_value(self: Any, value: str) -> None: ...
    def set_aria_property(self: Any, property: ARIAProperty, value: Any) -> None: ...
    def set_compliance_level(self: Any, level: str) -> None: ...
    def set_keyboard_shortcut(self: Any, key: str, callback: Callable) -> None: ...
    def set_live_region(self: Any, live_type: str) -> None: ...
    def setvar(self: Any, name: Any = ..., value: Any = ...) -> Any: ...
    def size(self: Any) -> Any: ...
    def slaves(self: Any) -> Any: ...
    def state(self: Any, statespec: Any = ...) -> Any: ...
    def tk_bisque(self: Any) -> Any: ...
    def tk_busy(self: Any, kw: Any) -> Any: ...
    def tk_busy_cget(self: Any, option: Any) -> Any: ...
    def tk_busy_config(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_configure(self: Any, cnf: Any = ..., kw: Any) -> Any: ...
    def tk_busy_current(self: Any, pattern: Any = ...) -> Any: ...
    def tk_busy_forget(self: Any) -> Any: ...
    def tk_busy_hold(self: Any, kw: Any) -> Any: ...
    def tk_busy_status(self: Any) -> Any: ...
    def tk_focusFollowsMouse(self: Any) -> Any: ...
    def tk_focusNext(self: Any) -> Any: ...
    def tk_focusPrev(self: Any) -> Any: ...
    def tk_setPalette(self: Any, args: Any, kw: Any) -> Any: ...
    def tk_strictMotif(self: Any, boolean: Any = ...) -> Any: ...
    def tkraise(self: Any, aboveThis: Any = ...) -> Any: ...
    def unbind(self: Any, sequence: Any, funcid: Any = ...) -> Any: ...
    def unbind_all(self: Any, sequence: Any) -> Any: ...
    def unbind_class(self: Any, className: Any, sequence: Any) -> Any: ...
    def update(self: Any) -> Any: ...
    def update_idletasks(self: Any) -> Any: ...
    def validate(self: Any) -> Any: ...
    def validate_accessibility_compliance(self: Any) -> List: ...
    def wait_variable(self: Any, name: Any = ...) -> Any: ...
    def wait_visibility(self: Any, window: Any = ...) -> Any: ...
    def wait_window(self: Any, window: Any = ...) -> Any: ...
    def waitvar(self: Any, name: Any = ...) -> Any: ...
    def winfo_atom(self: Any, name: Any, displayof: Any = ...) -> Any: ...
    def winfo_atomname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_cells(self: Any) -> Any: ...
    def winfo_children(self: Any) -> Any: ...
    def winfo_class(self: Any) -> Any: ...
    def winfo_colormapfull(self: Any) -> Any: ...
    def winfo_containing(self: Any, rootX: Any, rootY: Any, displayof: Any = ...) -> Any: ...
    def winfo_depth(self: Any) -> Any: ...
    def winfo_exists(self: Any) -> Any: ...
    def winfo_fpixels(self: Any, number: Any) -> Any: ...
    def winfo_geometry(self: Any) -> Any: ...
    def winfo_height(self: Any) -> Any: ...
    def winfo_id(self: Any) -> Any: ...
    def winfo_interps(self: Any, displayof: Any = ...) -> Any: ...
    def winfo_ismapped(self: Any) -> Any: ...
    def winfo_manager(self: Any) -> Any: ...
    def winfo_name(self: Any) -> Any: ...
    def winfo_parent(self: Any) -> Any: ...
    def winfo_pathname(self: Any, id: Any, displayof: Any = ...) -> Any: ...
    def winfo_pixels(self: Any, number: Any) -> Any: ...
    def winfo_pointerx(self: Any) -> Any: ...
    def winfo_pointerxy(self: Any) -> Any: ...
    def winfo_pointery(self: Any) -> Any: ...
    def winfo_reqheight(self: Any) -> Any: ...
    def winfo_reqwidth(self: Any) -> Any: ...
    def winfo_rgb(self: Any, color: Any) -> Any: ...
    def winfo_rootx(self: Any) -> Any: ...
    def winfo_rooty(self: Any) -> Any: ...
    def winfo_screen(self: Any) -> Any: ...
    def winfo_screencells(self: Any) -> Any: ...
    def winfo_screendepth(self: Any) -> Any: ...
    def winfo_screenheight(self: Any) -> Any: ...
    def winfo_screenmmheight(self: Any) -> Any: ...
    def winfo_screenmmwidth(self: Any) -> Any: ...
    def winfo_screenvisual(self: Any) -> Any: ...
    def winfo_screenwidth(self: Any) -> Any: ...
    def winfo_server(self: Any) -> Any: ...
    def winfo_toplevel(self: Any) -> Any: ...
    def winfo_viewable(self: Any) -> Any: ...
    def winfo_visual(self: Any) -> Any: ...
    def winfo_visualid(self: Any) -> Any: ...
    def winfo_visualsavailable(self: Any, includeids: Any = ...) -> Any: ...
    def winfo_vrootheight(self: Any) -> Any: ...
    def winfo_vrootwidth(self: Any) -> Any: ...
    def winfo_vrootx(self: Any) -> Any: ...
    def winfo_vrooty(self: Any) -> Any: ...
    def winfo_width(self: Any) -> Any: ...
    def winfo_x(self: Any) -> Any: ...
    def winfo_y(self: Any) -> Any: ...
    def xview(self: Any, args: Any) -> Any: ...
    def xview_moveto(self: Any, fraction: Any) -> Any: ...
    def xview_scroll(self: Any, number: Any, what: Any) -> Any: ...

__all__: List[str]